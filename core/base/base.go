// –ë–∞–∑–æ–≤—ã–π –º–æ–¥—É–ª—å –±–æ—Ç–∞

package base

import (
	"fmt"
	"github.com/SevereCloud/vksdk/v2/events"
	"github.com/beshenkaD/maschinenkonzept/core"
	"github.com/beshenkaD/maschinenkonzept/vkutil"
	"runtime"
	"syscall"
	"time"
)

type BaseModule struct{}

func New() *BaseModule {
	return &BaseModule{}
}

func (w *BaseModule) Name() string {
	return "–û—Å–Ω–æ–≤–∞"
}

func (w *BaseModule) OnInviteUser(bot *core.Bot, msg events.MessageNewObject) {
	vkutil.SendMessage(bot.Session, "–ü—Ä–∏–≤–µ—Ç! üëã", msg.Message.PeerID, true)
}

func (w *BaseModule) OnKickUser(bot *core.Bot, msg events.MessageNewObject) {
	vkutil.SendMessage(bot.Session, "–ü–æ–∫–∞ üëã", msg.Message.PeerID, true)
}

func (w *BaseModule) Commands() []core.Command {
	return []core.Command{
		&pingCommand{},
		&statCommand{},
	}
}

func (w *BaseModule) Description() string {
	return "–ë–∞–∑–æ–≤—ã–π –º–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"
}

type pingCommand struct{}

func (c *pingCommand) Info() *core.CommandInfo {
	return &core.CommandInfo{
		Name: "Ping",
		Desc: "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–∏–≥—Ä–∞—Ç—å —Å –Ω–∏–º –≤ –ø–∏–Ω–≥-–ø–æ–Ω–≥‚öæ",
	}
}

func (c *pingCommand) Run(msg events.MessageNewObject, argc int, argv []string, bot *core.Bot) {
	vkutil.SendMessage(bot.Session, "pong", msg.Message.PeerID, true)
}

func (c *pingCommand) Usage() *core.CommandUsage {
	return &core.CommandUsage{
		Desc:   "–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±–æ—Ç–∞",
		Params: []core.CommandUsageParam{},
	}
}

type statCommand struct{}

func (c *statCommand) Info() *core.CommandInfo {
	return &core.CommandInfo{
		Name: "Stat",
		Desc: "–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞ üöÄ",
	}
}

func (c *statCommand) Run(msg events.MessageNewObject, argc int, argv []string, bot *core.Bot) {
	s := `‚öô –ó–∞–ø—É—â–µ–Ω –∫–∞–∫: %s
‚öô OS: %s
‚öô Uptime: %s
‚öô –°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: %d
‚öô –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ (alloc): %v MiB
`
	var m runtime.MemStats
	runtime.ReadMemStats(&m)

	v := m.Alloc / 1024 / 1024
	u := time.Since(bot.StartTime)
	os := runtime.GOOS

	s = fmt.Sprintf(s, bot.SelfName, os, u, bot.Processed, v)

	var r syscall.Rusage
	err := syscall.Getrusage(syscall.RUSAGE_SELF, &r)

	if err == nil {
		s += fmt.Sprintf("‚öô –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ (rusage): %v MiB", r.Maxrss/1024)
	}

	vkutil.SendMessage(bot.Session, s, msg.Message.PeerID, true)
}

func (c *statCommand) Usage() *core.CommandUsage {
	return &core.CommandUsage{
		Desc:   "–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞",
		Params: []core.CommandUsageParam{},
	}
}
